{"ast":null,"code":"import _slicedToArray from \"/Users/benchaplin/Documents/GitHub/learn_latex_site/node_modules/@babel/runtime/helpers/esm/slicedToArray\";\nvar _jsxFileName = \"/Users/benchaplin/Documents/GitHub/learn_latex_site/src/components/TeXCompile.js\";\nimport React, { useState } from \"react\";\nimport \"../index.css\";\nimport InputBox from \"./InputBox\";\nimport CompiledBox from \"./CompiledBox\";\n\nfunction TeXCompile(props) {\n  const _useState = useState(props.prompt),\n        _useState2 = _slicedToArray(_useState, 2),\n        text = _useState2[0],\n        setText = _useState2[1];\n\n  const _useState3 = useState(false),\n        _useState4 = _slicedToArray(_useState3, 2),\n        completed = _useState4[0],\n        setCompleted = _useState4[1];\n\n  const handleChange = event => {\n    // Compare strings w/out spaces\n    console.log(formatTeX(props.test));\n    console.log(formatTeX(event.target.value));\n\n    if (formatTeX(event.target.value) === formatTeX(props.test)) {\n      console.log(\"DINE\");\n      setCompleted(true);\n    }\n\n    setText(event.target.value);\n  };\n\n  return React.createElement(React.Fragment, null, React.createElement(\"div\", {\n    className: \"row\",\n    style: {\n      marginTop: \"15px\"\n    },\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 23\n    },\n    __self: this\n  }, React.createElement(\"div\", {\n    className: \"container-fluid col-sm-7\",\n    style: {\n      marginBottom: 10\n    },\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 24\n    },\n    __self: this\n  }, React.createElement(InputBox, {\n    text: text,\n    handleChange: handleChange,\n    setText: setText,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 25\n    },\n    __self: this\n  })), React.createElement(\"div\", {\n    className: \"col-sm-5\",\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 27\n    },\n    __self: this\n  }, React.createElement(CompiledBox, {\n    text: text,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 28\n    },\n    __self: this\n  }))), React.createElement(\"div\", {\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 31\n    },\n    __self: this\n  }, completed ? React.createElement(\"button\", {\n    className: \"btn btn-success\",\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 33\n    },\n    __self: this\n  }, React.createElement(\"a\", {\n    href: \"/fracs\",\n    style: {\n      color: \"white\"\n    },\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 34\n    },\n    __self: this\n  }, \"Next\")) : React.createElement(React.Fragment, null)));\n}\n\nfunction formatTeX(str) {\n  const new_str = str.replace(/ /g, \"\");\n  let newer_str = new_str;\n\n  for (let i = 0; i < str.length; i++) {\n    if (new_str.charAt(i) === \"}\") {\n      if (new_str.charAt(i - 2) === \"{\") {\n        newer_str = new_str.slice(0, i - 2) + new_str.slice(i - 1, i) + new_str.slice(i + 1);\n      }\n    }\n  }\n\n  return newer_str;\n}\n\nexport default TeXCompile;","map":{"version":3,"sources":["/Users/benchaplin/Documents/GitHub/learn_latex_site/src/components/TeXCompile.js"],"names":["React","useState","InputBox","CompiledBox","TeXCompile","props","prompt","text","setText","completed","setCompleted","handleChange","event","console","log","formatTeX","test","target","value","marginTop","marginBottom","color","str","new_str","replace","newer_str","i","length","charAt","slice"],"mappings":"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","sourcesContent":["import React, { useState } from \"react\";\nimport \"../index.css\";\nimport InputBox from \"./InputBox\";\nimport CompiledBox from \"./CompiledBox\";\n\nfunction TeXCompile(props) {\n  const [text, setText] = useState(props.prompt);\n  const [completed, setCompleted] = useState(false);\n\n  const handleChange = event => {\n    // Compare strings w/out spaces\n    console.log(formatTeX(props.test));\n    console.log(formatTeX(event.target.value));\n    if (formatTeX(event.target.value) === formatTeX(props.test)) {\n      console.log(\"DINE\")\n      setCompleted(true);\n    }\n    setText(event.target.value);\n  };\n\n  return (\n    <>\n      <div className=\"row\" style={{ marginTop: \"15px\" }}>\n        <div className=\"container-fluid col-sm-7\" style={{ marginBottom: 10 }}>\n          <InputBox text={text} handleChange={handleChange} setText={setText} />\n        </div>\n        <div className=\"col-sm-5\">\n          <CompiledBox text={text} />\n        </div>\n      </div>\n      <div>\n        {completed ? (\n          <button className=\"btn btn-success\">\n            <a href=\"/fracs\" style={{ color: \"white\" }}>\n              Next\n            </a>\n          </button>\n        ) : (\n          <></>\n        )}\n      </div>\n    </>\n  );\n}\n\nfunction formatTeX(str) {\n  const new_str = str.replace(/ /g, \"\");\n  let newer_str = new_str;\n\n  for (let i = 0; i < str.length; i++) {\n    if (new_str.charAt(i) === \"}\") {\n      if (new_str.charAt(i - 2) === \"{\") {\n        newer_str =\n          new_str.slice(0, i - 2) +\n          new_str.slice(i - 1, i) +\n          new_str.slice(i + 1);\n      }\n    }\n  }\n  return newer_str;\n}\n\nexport default TeXCompile;\n"]},"metadata":{},"sourceType":"module"}