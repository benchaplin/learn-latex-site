{"ast":null,"code":"import _slicedToArray from \"/Users/benchaplin/Documents/GitHub/learn-latex-site/node_modules/@babel/runtime/helpers/esm/slicedToArray\";\nvar _jsxFileName = \"/Users/benchaplin/Documents/GitHub/learn-latex-site/src/components/TeXCompile.js\";\nimport React, { useState } from \"react\";\nimport { Link } from \"react-router-dom\";\nimport InputBox from \"./InputBox\";\nimport CompiledBox from \"./CompiledBox\";\nimport { lessonList } from \"../lessons/lessons\";\n\nfunction TeXCompile(props) {\n  const _useState = useState(props.prompt),\n        _useState2 = _slicedToArray(_useState, 2),\n        text = _useState2[0],\n        setText = _useState2[1];\n\n  const _useState3 = useState(false),\n        _useState4 = _slicedToArray(_useState3, 2),\n        completed = _useState4[0],\n        setCompleted = _useState4[1];\n\n  const handleChange = event => {\n    // Compare strings w/out spaces and unnecessary curly brackets\n    if (props.comparable) {\n      if (formatTeX(event.target.value) === formatTeX(props.lesson.test)) {\n        setCompleted(true);\n      }\n    }\n\n    setText(event.target.value);\n  };\n\n  const nextPath = lessonList().indexOf(props.lesson) < lessonList().length - 1 ? lessonList()[lessonList().indexOf(props.lesson) + 1].path : \"/\";\n  return React.createElement(React.Fragment, null, React.createElement(\"div\", {\n    className: \"row\",\n    style: {\n      marginTop: 15,\n      marginRight: 10\n    },\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 28\n    },\n    __self: this\n  }, React.createElement(\"div\", {\n    className: \"container-fluid col-sm-7\",\n    style: {\n      marginBottom: 10\n    },\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 29\n    },\n    __self: this\n  }, React.createElement(InputBox, {\n    text: text,\n    handleChange: handleChange,\n    setText: setText,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 30\n    },\n    __self: this\n  })), React.createElement(\"div\", {\n    className: \"col-sm-5\",\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 32\n    },\n    __self: this\n  }, React.createElement(CompiledBox, {\n    text: text,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 33\n    },\n    __self: this\n  }))), React.createElement(\"div\", {\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 36\n    },\n    __self: this\n  }, completed ? React.createElement(Link, {\n    to: nextPath,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 38\n    },\n    __self: this\n  }, React.createElement(\"button\", {\n    onClick: handleClick,\n    className: \"btn btn-success\",\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 39\n    },\n    __self: this\n  }, \"Next\")) : React.createElement(React.Fragment, null)));\n} // Returns input string without spaces and curly brackets containing one non-space character\n// Consider \"...\" equivalent to \"\\ldots\"\n\n\nfunction formatTeX(str) {\n  let new_str = str.replace(/ /g, \"\");\n  new_str = new_str.replace(/\\\\ldots/g, \"...\");\n  let i = 0;\n\n  while (i < new_str.length) {\n    if (new_str.charAt(i) === \"}\") {\n      if (new_str.charAt(i - 2) === \"{\") {\n        new_str = new_str.slice(0, i - 2) + new_str.slice(i - 1, i) + new_str.slice(i + 1);\n      }\n    }\n\n    i = i + 1;\n  }\n\n  return new_str;\n}\n\nexport default TeXCompile;","map":{"version":3,"sources":["/Users/benchaplin/Documents/GitHub/learn-latex-site/src/components/TeXCompile.js"],"names":["React","useState","Link","InputBox","CompiledBox","lessonList","TeXCompile","props","prompt","text","setText","completed","setCompleted","handleChange","event","comparable","formatTeX","target","value","lesson","test","nextPath","indexOf","length","path","marginTop","marginRight","marginBottom","handleClick","str","new_str","replace","i","charAt","slice"],"mappings":"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","sourcesContent":["import React, { useState } from \"react\";\nimport { Link } from \"react-router-dom\";\nimport InputBox from \"./InputBox\";\nimport CompiledBox from \"./CompiledBox\";\nimport { lessonList } from \"../lessons/lessons\";\n\nfunction TeXCompile(props) {\n  const [text, setText] = useState(props.prompt);\n  const [completed, setCompleted] = useState(false);\n\n  const handleChange = event => {\n    // Compare strings w/out spaces and unnecessary curly brackets\n    if (props.comparable) {\n      if (formatTeX(event.target.value) === formatTeX(props.lesson.test)) {\n        setCompleted(true);\n      }\n    }\n    setText(event.target.value);\n  };\n\n  const nextPath =\n    lessonList().indexOf(props.lesson) < lessonList().length - 1\n      ? lessonList()[lessonList().indexOf(props.lesson) + 1].path\n      : \"/\";\n\n  return (\n    <>\n      <div className=\"row\" style={{ marginTop: 15, marginRight: 10 }}>\n        <div className=\"container-fluid col-sm-7\" style={{ marginBottom: 10 }}>\n          <InputBox text={text} handleChange={handleChange} setText={setText} />\n        </div>\n        <div className=\"col-sm-5\">\n          <CompiledBox text={text} />\n        </div>\n      </div>\n      <div>\n        {completed ? (\n          <Link to={nextPath}>\n            <button onClick={handleClick} className=\"btn btn-success\">\n              Next\n            </button>\n          </Link>\n        ) : (\n          <></>\n        )}\n      </div>\n    </>\n  );\n}\n\n// Returns input string without spaces and curly brackets containing one non-space character\n// Consider \"...\" equivalent to \"\\ldots\"\nfunction formatTeX(str) {\n  let new_str = str.replace(/ /g, \"\");\n  new_str = new_str.replace(/\\\\ldots/g, \"...\");\n\n  let i = 0;\n  while (i < new_str.length) {\n    if (new_str.charAt(i) === \"}\") {\n      if (new_str.charAt(i - 2) === \"{\") {\n        new_str =\n          new_str.slice(0, i - 2) +\n          new_str.slice(i - 1, i) +\n          new_str.slice(i + 1);\n      }\n    }\n    i = i + 1;\n  }\n  return new_str;\n}\n\nexport default TeXCompile;\n"]},"metadata":{},"sourceType":"module"}