{"ast":null,"code":"import _slicedToArray from\"/Users/benchaplin/Documents/GitHub/learn_latex_site/node_modules/@babel/runtime/helpers/esm/slicedToArray\";import React,{useState}from\"react\";import\"../index.css\";import InputBox from\"./InputBox\";import CompiledBox from\"./CompiledBox\";function TeXCompile(props){var _useState=useState(props.prompt),_useState2=_slicedToArray(_useState,2),text=_useState2[0],setText=_useState2[1];var _useState3=useState(false),_useState4=_slicedToArray(_useState3,2),completed=_useState4[0],setCompleted=_useState4[1];var handleChange=function handleChange(event){// Compare strings w/out spaces and unnecessary curly brackets\nif(props.comparable){if(formatTeX(event.target.value)===formatTeX(props.test)){setCompleted(true);}}setText(event.target.value);};return React.createElement(React.Fragment,null,React.createElement(\"div\",{className:\"row\",style:{marginTop:\"15px\"}},React.createElement(\"div\",{className:\"container-fluid col-sm-7\",style:{marginBottom:10}},React.createElement(InputBox,{text:text,handleChange:handleChange,setText:setText})),React.createElement(\"div\",{className:\"col-sm-5\"},React.createElement(CompiledBox,{text:text}))),React.createElement(\"div\",null,completed?React.createElement(\"button\",{className:\"btn btn-success\"},React.createElement(\"a\",{href:\"/fracs\",style:{color:\"white\"}},\"Next\")):React.createElement(React.Fragment,null)));}// Returns input string without spaces and curly brackets containing one non-space character\nfunction formatTeX(str){var new_str=str.replace(/ /g,\"\");var newer_str=new_str;var i=0;while(i<newer_str.length){if(newer_str.charAt(i)===\"}\"){if(newer_str.charAt(i-2)===\"{\"){newer_str=newer_str.slice(0,i-2)+newer_str.slice(i-1,i)+newer_str.slice(i+1);}}i=i+1;}return newer_str;}export default TeXCompile;","map":{"version":3,"sources":["/Users/benchaplin/Documents/GitHub/learn_latex_site/src/components/TeXCompile.js"],"names":["React","useState","InputBox","CompiledBox","TeXCompile","props","prompt","text","setText","completed","setCompleted","handleChange","event","comparable","formatTeX","target","value","test","marginTop","marginBottom","color","str","new_str","replace","newer_str","i","length","charAt","slice"],"mappings":"sIAAA,MAAOA,CAAAA,KAAP,EAAgBC,QAAhB,KAAgC,OAAhC,CACA,MAAO,cAAP,CACA,MAAOC,CAAAA,QAAP,KAAqB,YAArB,CACA,MAAOC,CAAAA,WAAP,KAAwB,eAAxB,CAEA,QAASC,CAAAA,UAAT,CAAoBC,KAApB,CAA2B,eACDJ,QAAQ,CAACI,KAAK,CAACC,MAAP,CADP,wCAClBC,IADkB,eACZC,OADY,8BAESP,QAAQ,CAAC,KAAD,CAFjB,yCAElBQ,SAFkB,eAEPC,YAFO,eAIzB,GAAMC,CAAAA,YAAY,CAAG,QAAfA,CAAAA,YAAe,CAAAC,KAAK,CAAI,CAC5B;AACA,GAAIP,KAAK,CAACQ,UAAV,CAAsB,CACpB,GAAIC,SAAS,CAACF,KAAK,CAACG,MAAN,CAAaC,KAAd,CAAT,GAAkCF,SAAS,CAACT,KAAK,CAACY,IAAP,CAA/C,CAA6D,CAC3DP,YAAY,CAAC,IAAD,CAAZ,CACD,CACF,CACDF,OAAO,CAACI,KAAK,CAACG,MAAN,CAAaC,KAAd,CAAP,CACD,CARD,CAUA,MACE,yCACE,2BAAK,SAAS,CAAC,KAAf,CAAqB,KAAK,CAAE,CAAEE,SAAS,CAAE,MAAb,CAA5B,EACE,2BAAK,SAAS,CAAC,0BAAf,CAA0C,KAAK,CAAE,CAAEC,YAAY,CAAE,EAAhB,CAAjD,EACE,oBAAC,QAAD,EAAU,IAAI,CAAEZ,IAAhB,CAAsB,YAAY,CAAEI,YAApC,CAAkD,OAAO,CAAEH,OAA3D,EADF,CADF,CAIE,2BAAK,SAAS,CAAC,UAAf,EACE,oBAAC,WAAD,EAAa,IAAI,CAAED,IAAnB,EADF,CAJF,CADF,CASE,+BACGE,SAAS,CACR,8BAAQ,SAAS,CAAC,iBAAlB,EACE,yBAAG,IAAI,CAAC,QAAR,CAAiB,KAAK,CAAE,CAAEW,KAAK,CAAE,OAAT,CAAxB,SADF,CADQ,CAOR,wCARJ,CATF,CADF,CAuBD,CAED;AACA,QAASN,CAAAA,SAAT,CAAmBO,GAAnB,CAAwB,CACtB,GAAMC,CAAAA,OAAO,CAAGD,GAAG,CAACE,OAAJ,CAAY,IAAZ,CAAkB,EAAlB,CAAhB,CACA,GAAIC,CAAAA,SAAS,CAAGF,OAAhB,CAEA,GAAIG,CAAAA,CAAC,CAAG,CAAR,CACA,MAAOA,CAAC,CAAGD,SAAS,CAACE,MAArB,CAA6B,CAC3B,GAAIF,SAAS,CAACG,MAAV,CAAiBF,CAAjB,IAAwB,GAA5B,CAAiC,CAC/B,GAAID,SAAS,CAACG,MAAV,CAAiBF,CAAC,CAAG,CAArB,IAA4B,GAAhC,CAAqC,CACnCD,SAAS,CACPA,SAAS,CAACI,KAAV,CAAgB,CAAhB,CAAmBH,CAAC,CAAG,CAAvB,EACAD,SAAS,CAACI,KAAV,CAAgBH,CAAC,CAAG,CAApB,CAAuBA,CAAvB,CADA,CAEAD,SAAS,CAACI,KAAV,CAAgBH,CAAC,CAAG,CAApB,CAHF,CAID,CACF,CACDA,CAAC,CAAGA,CAAC,CAAG,CAAR,CACD,CACD,MAAOD,CAAAA,SAAP,CACD,CAED,cAAepB,CAAAA,UAAf","sourcesContent":["import React, { useState } from \"react\";\nimport \"../index.css\";\nimport InputBox from \"./InputBox\";\nimport CompiledBox from \"./CompiledBox\";\n\nfunction TeXCompile(props) {\n  const [text, setText] = useState(props.prompt);\n  const [completed, setCompleted] = useState(false);\n\n  const handleChange = event => {\n    // Compare strings w/out spaces and unnecessary curly brackets\n    if (props.comparable) {\n      if (formatTeX(event.target.value) === formatTeX(props.test)) {\n        setCompleted(true);\n      }\n    }\n    setText(event.target.value);\n  };\n\n  return (\n    <>\n      <div className=\"row\" style={{ marginTop: \"15px\" }}>\n        <div className=\"container-fluid col-sm-7\" style={{ marginBottom: 10 }}>\n          <InputBox text={text} handleChange={handleChange} setText={setText} />\n        </div>\n        <div className=\"col-sm-5\">\n          <CompiledBox text={text} />\n        </div>\n      </div>\n      <div>\n        {completed ? (\n          <button className=\"btn btn-success\">\n            <a href=\"/fracs\" style={{ color: \"white\" }}>\n              Next\n            </a>\n          </button>\n        ) : (\n          <></>\n        )}\n      </div>\n    </>\n  );\n}\n\n// Returns input string without spaces and curly brackets containing one non-space character\nfunction formatTeX(str) {\n  const new_str = str.replace(/ /g, \"\");\n  let newer_str = new_str;\n\n  let i = 0;\n  while (i < newer_str.length) {\n    if (newer_str.charAt(i) === \"}\") {\n      if (newer_str.charAt(i - 2) === \"{\") {\n        newer_str =\n          newer_str.slice(0, i - 2) +\n          newer_str.slice(i - 1, i) +\n          newer_str.slice(i + 1);\n      }\n    }\n    i = i + 1;\n  }\n  return newer_str;\n}\n\nexport default TeXCompile;\n"]},"metadata":{},"sourceType":"module"}